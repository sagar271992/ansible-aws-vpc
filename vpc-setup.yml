- hosts: localhost
  connection: local
  gather_facts: False
  tasks:
      # Import variables files
    - name: import vpc variable files
      include_vars: vars/vpc_setup
     
    #module-1 create vpc range 
    - name: create vprofile vpc
      ec2_vpc_net:
        name: "{{ vpc_name }}"
        cidr_block: "{{ vpcCidr }}"
        region: "{{ region }}"
        dns_support: yes
        dns_hostnames: yes
        tenancy: default
        state: "{{ state }}"
      register: vpcout
    
    - debug:
        var: vpcout

    # module-2 : public subnet 1 creation
    - name: create pubic subnet in zone 1
      ec2_vpc_subnet: 
        vpc_id: "{{ vpcout.vpc.id }}"
        region: "{{ region }}"
        az: "{{ zone1 }}"
        state: "{{ state }}"
        cidr : "{{ Pubsub1Cidr }}"
        map_public: yes
        resource_tags:
            Name: vprofle-pubsub1
      register: pubsub1out
    
    #- debug:
        #var: pubsub1out

    # module-3 : public subnet 2 creation
    - name: create pubilc subnet in zone 2
      ec2_vpc_subnet: 
        vpc_id: "{{ vpcout.vpc.id }}"
        region: "{{ region }}"
        az: "{{ zone2 }}"
        state: "{{ state }}"
        cidr : "{{ Pubsub2Cidr }}"
        map_public: yes
        resource_tags:
            Name: vprofle-pubsub2
      register: pubsub2out
    
    #- debug:
        #var: pubsub2out
    
    # module-4 : public subnet 3 creation
    - name: create pubilc subnet in zone 3
      ec2_vpc_subnet: 
        vpc_id: "{{ vpcout.vpc.id }}"
        region: "{{ region }}"
        az: "{{ zone3 }}"
        state: "{{ state }}"
        cidr : "{{ Pubsub3Cidr }}"
        map_public: yes
        resource_tags:
            Name: vprofle-pubsub3
      register: pubsub3out
    
    #- debug:
        #var: pubsub3out

    # module-5 : private subnet 1 creation
    - name: create private subnet in zone 1
      ec2_vpc_subnet: 
        vpc_id: "{{ vpcout.vpc.id }}"
        region: "{{ region }}"
        az: "{{ zone1 }}"
        state: "{{ state }}"
        cidr : "{{ Prisub1Cidr }}"
        map_public: no
        resource_tags:
            Name: vprofle-prisub1
      register: prisub1out
    
    #- debug:
        #var: prisub1out

    # module-6 : private subnet 2 creation
    - name: create private subnet in zone 2
      ec2_vpc_subnet: 
        vpc_id: "{{ vpcout.vpc.id }}"
        region: "{{ region }}"
        az: "{{ zone2 }}"
        state: "{{ state }}"
        cidr : "{{ Prisub2Cidr }}"
        map_public: no
        resource_tags:
            Name: vprofle-prisub2
      register: prisub2out
    
    #- debug:
        #var: prisub2out

    # module-7 : private subnet 3 creation
    - name: create private subnet in zone 3
      ec2_vpc_subnet: 
        vpc_id: "{{ vpcout.vpc.id }}"
        region: "{{ region }}"
        az: "{{ zone3 }}"
        state: "{{ state }}"
        cidr : "{{ Prisub3Cidr }}"
        map_public: no
        resource_tags:
            Name: vprofle-prisub3
      register: prisub3out
    
    #- debug:
        #var: prisub3out

    # module-8 : internet gateway creation for pub subnet
    - name: internet gateway setup
      ec2_vpc_igw:
        vpc_id: "{{ vpcout.vpc.id }}"
        region: "{{ region }}"
        state: "{{ state }}"
        resource_tags:
            Name: vprofle-IGW
      register: IGWout
    #- debug:
        #var: IGWout
    
    # module-9 : route table for pub subnet association  
    - name: Set up public subnet route table
      ec2_vpc_route_table:
        vpc_id: "{{ vpcout.vpc.id }}"
        region: "{{ region }}"
        resource_tags:
            Name: vprofle-RT
        subnets:
        - "{{ pubsub1out.subnet.id }}"
        - "{{ pubsub2out.subnet.id }}"
        - "{{ pubsub3out.subnet.id }}"
        routes:
        - dest: 0.0.0.0/0
          gateway_id: "{{ IGWout.gateway_id }}"
      register: pubRTout

    # module10 : NAT gateway creation for private subnet allocate new Elastic IP to it
    - name: Create new nat gateway and allocate new EIP.
      ec2_vpc_nat_gateway:
        state: "{{ state }}"
        subnet_id: "{{ pubsub1out.subnet.id }}" #make sure delete NAT-G release elastic ip [cost]
        wait: yes
        region: "{{ region }}"
        if_exist_do_not_create: true
      register: NATGWout

    # module-11 : route table for private subnet association
    - name: Set up private subnet route table
      ec2_vpc_route_table:
        vpc_id: "{{ vpcout.vpc.id }}"
        region: "{{ region }}"
        resource_tags:
            Name: vprofle-Nat-RT
        subnets:
        - "{{ prisub1out.subnet.id }}"
        - "{{ prisub2out.subnet.id }}"
        - "{{ prisub3out.subnet.id }}"
        routes:
        - dest: 0.0.0.0/0
          gateway_id: "{{ NATGWout.nat_gateway_id }}"
      register: priRTout
    
    - debug:
        var: "{{ item }}"
      loop:
       - vpcout
       - pubsub1out
       - pubsub2out
       - pubsub3out
       - prisub1out
       - prisub2out
       - prisub3out
       - IGWout
       - pubRTout
       - NATGWout
       - priRTout
#you can store all these varibale into a file or you want to use instently use fact module
# fact: varible store use module which can fact for us to use runtime
    - set_fact: 
        vpc-id: "{{ vpcout.vpc.id }}"
        pubsub1: "{{ pubsub1out.subnet.id }}"
        pubsub2: "{{ pubsub2out.subnet.id }}"
        pubsub3: "{{ pubsub3out.subnet.id }}"
        prisub1: "{{ prisub1out.subnet.id }}"
        prisub2: "{{ prisub2out.subnet.id }}"
        prisub3: "{{ prisub3out.subnet.id }}"
        ig-id: "{{ IGWout.gateway_id }}"
        pub-rt-id: "{{ pubRTout.route_table.id }}"
        nat-gw-id: "{{ NATGWout.nat_gateway_id }}"
        pri-rt-id: "{{ priRTout.route_table.id }}"
        cacheable: yes #variable added to fact cache
    
    - name: create variable file
      copy: 
        content: " vpc-id: {{ vpcout.vpc.id }} \n pubsub1: {{ pubsub1out.subnet.id }} \n pubsub2: {{ pubsub2out.subnet.id }} \n pubsub3: {{ pubsub3out.subnet.id }} \n prisub1: {{ prisub1out.subnet.id }} \n prisub2: {{ prisub2out.subnet.id }} \n prisub3: {{ prisub3out.subnet.id }} \n ig-id: {{ IGWout.gateway_id }} \n pub-rt-id: {{ pubRTout.route_table.id }} \n nat-gw-id: {{ NATGWout.nat_gateway_id }} \n pri-rt-id: {{ priRTout.route_table.id }} "
        dest: vars/output_vars