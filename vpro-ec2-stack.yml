- hosts: localhost
  connection: local
  gather_facts: False

  tasks:
    
   #import vpro-stac-setup variable file
    - name: import vpro stack variable file
      include_vars: vars/vpro_stack_setup
   
   # Import vpc variables files
    - name: import vpc variable files
      include_vars: vars/vpc_output_vars

    # we need a key to login to our instances
    - name: create ec2 key
      ec2_key:
        name: vprofile_stack_keypair
        region: "{{ region }}"
      register: keyout
    - debug:
        var: keyout
    
    # and store that key
    - name: Save private key into file loginkey_vpro.pem
      copy:
        content: "{{ keyout.key.private_key }}"
        dest: "./vpro_stack_keypair.pem"
        mode: 0600
      when: vprokey_out.changed

    #create security group load balancer 
    - name: load balancer security group
      ec2_group:
        name: vprofile_ELB_SG
        description: allow all ports from everywhere and and all port within sg
        region: "{{ region }}"
        vpc_id: "{{ vpc_id }}"
        #profile: "{{ aws_profile }}"
        rules:
        - proto: tcp
          from_port: 80
          to_port: 80
          cidr_ip: 0.0.0.0/0
          rule_desc: allow all on port 80
      register: vprofile_ELB_SGout

    #create security group ec2 instances
    - name: vprofile stack security group
      ec2_group:
        name: vprofile_stack_SG
        description: allow port 22 from everywhere and and all port within sg
        vpc_id: "{{ vpc_id }}"
        #profile: "{{ aws_profile }}"
        region: "{{ region }}"
        purge_rules: no
        rules:
        - proto: tcp
          from_port: 80
          to_port: 80
          group_id: "{{ vprofile_ELB_SGout.group_id }}"
          rule_desc: ELB allow all on port 80

        - proto: tcp
          from_port: 22
          to_port: 22
          group_id: "{{bastionSGid}}"
          rule_desc: bastion allow all on port 22
      register: vprofile_stack_SGout
    
    #create security group for ec2 instances to talk each other
    - name: update security group with its own id
      ec2_group:
        name: vprofile_stack_SG
        description: allow port 22 from everywhere and and all port within sg
        vpc_id: "{{ vpc_id }}"
        #profile: "{{ aws_profile }}"
        region: "{{ region }}"
        purge_rules: no
        rules:
        - proto: all
          group_id: "{{ vprofile_stack_SGout.group_id }}"
          rule_desc: allow all all traffic internlly

    # create loadbalancer instance Nginx
    - name: create nginx LB instance webo1
      ec2:
        key_name: vprofile_stack_keypair
        region: "{{ region }}"
        instance_type: t2.micro
        image: "{{ nginx_ami }}"
        wait: yes
        wait_timeout: 300
        instance_tags:
          Name: "web01-nginx"
          Project: "vprofile"
          Owner: "Dev ops team"
        exact_count: " 1 "
        count_tag:
          Name: "web01-nginx"
          Project: "vprofile"
          Owner: "Dev ops team"
        group_id: "{{ vprofile_stack_SGout.group_id }}"
        vpc_subnet_id: "{{ prisub1 }}"
      register: web01_nginx_out

     # create tomcat instance app01
    - name: create tomcat instance app01
      ec2:
        key_name: vprofile_stack_keypair
        region: "{{ region }}"
        instance_type: t2.micro
        image: "{{ tomcat_ami }}"
        wait: yes
        wait_timeout: 300
        instance_tags:
          Name: "app01-tomcat"
          Project: "vprofile"
          Owner: "Dev ops team"
        exact_count: " 1 "
        count_tag:
          Name: "app01-tomcat"
          Project: "vprofile"
          Owner: "Dev ops team"
        group_id: "{{ vprofile_stack_SGout.group_id }}"
        vpc_subnet_id: "{{ prisub1 }}"
      register: app01_tomcat_out

     # create memcache instance mc01
    - name: create memcache instance mc01
      ec2:
        key_name: vprofile_stack_keypair
        region: "{{ region }}"
        instance_type: t2.micro
        image: "{{ memcache_ami }}"
        wait: yes
        wait_timeout: 300
        instance_tags:
          Name: "mc01-memcache"
          Project: "vprofile"
          Owner: "Dev ops team"
        exact_count: " 1 "
        count_tag:
          Name: "mc01-memcache"
          Project: "vprofile"
          Owner: "Dev ops team"
        group_id: "{{ vprofile_stack_SGout.group_id }}"
        vpc_subnet_id: "{{ prisub1 }}"
      register: mc01_memcache_out

     # create rabbitMQ instance rmq01
    - name: create RMQ instance rmq01
      ec2:
        key_name: vprofile_stack_keypair
        region: "{{ region }}"
        instance_type: t2.micro
        image: "{{ rmq_ami }}"
        wait: yes
        wait_timeout: 300
        instance_tags:
          Name: "rmq01-RMQ"
          Project: "vprofile"
          Owner: "Dev ops team"
        exact_count: " 1 "
        count_tag:
          Name: "rmq01-RMQ"
          Project: "vprofile"
          Owner: "Dev ops team"
        group_id: "{{ vprofile_stack_SGout.group_id }}"
        vpc_subnet_id: "{{ prisub1 }}"
      register: rmq01_RMQ_out

     # create mysql instance db01
    - name: create mysql instance db01
      ec2:
        key_name: vprofile_stack_keypair
        region: "{{ region }}"
        instance_type: t2.micro
        image: "{{ mysql_ami }}"
        wait: yes
        wait_timeout: 300
        instance_tags:
          Name: "db01-mysql"
          Project: "vprofile"
          Owner: "Dev ops team"
        exact_count: " 1 "
        count_tag:
          Name: "db01-mysql"
          Project: "vprofile"
          Owner: "Dev ops team"
        group_id: "{{ vprofile_stack_SGout.group_id }}"
        vpc_subnet_id: "{{ prisub1 }}"
      register: db01_mysql_out
    
    - debug:
        var: db01_mysql_out

    # creating load balancers
    - local_action:
        module: ec2_elb_lb
        name: "vprofile-elb"
        region: "{{region}}"
        state: "{{state}}"
        instance_ids:
         - "{{ web01_nginx_out.tagged_instances[0].id }}"
        purge_instance_ids: true
        security_group_ids: "{{ vprofile_ELB_SGout.group_id }}"
        subnets:
          - "{{ pubsub1 }}"
          - "{{ pubsub2 }}"
          - "{{ pubsub3 }}"
        listeners:
        - protocol: http # options are http, https, ssl, tcp
          load_balancer_port: 80
          instance_port: 80

    # created all intances private ip we are going to store in file
    - name: Insert/Update all instances private ip to file
      blockinfile:
        path: provision-stack/group_vars/hostip
        create: yes
        backup: no
        block: |
          web01-ip: {{ web01_nginx_out.tagged_instances[0].private_ip }}
          app01-ip: {{ app01_tomcat_out.tagged_instances[0].private_ip }}
          db01-ip: {{ db01_mysql_out.tagged_instances[0].private_ip }}
          rmq01-ip: {{ rmq01_RMQ_out.tagged_instances[0].private_ip }}
          mc01-ip: {{ mc01_memcache_out.tagged_instances[0].private_ip }}
    
    #copy login key
    - name: copy login key to provision stack
      copy:
        source: ./vpro_stack_keypair.pem
        dest: provision-stack/vpro_stack_keypair.pem
        mode: 0400

    # prepare inventory file - host-entry && groups
    - name: Insert/Update all instances private ip to file
      blockinfile:
        path: provision-stack/inventory-vpro
        create: yes
        backup: no
        block: |
          web01-ip ansible_host={{ web01_nginx_out.tagged_instances[0].private_ip }}
          app01-ip ansible_host={{ app01_tomcat_out.tagged_instances[0].private_ip }}
          db01-ip ansible_host={{ db01_mysql_out.tagged_instances[0].private_ip }}
          rmq01-ip ansible_host={{ rmq01_RMQ_out.tagged_instances[0].private_ip }}
          mc01-ip ansible_host={{ mc01_memcache_out.tagged_instances[0].private_ip }}
          ctrl ansible_host=127.0.0.1 ansible_connection=local

          [ websrvgrp ]
           web01

          [ appsrvgrp ]
          app01

          [ dbsrvgrp ]
          db01
          
          [ rmqsrvgrp ]
          rmq01

          [ mcsrvgrp ]
          mc01

          [ ctrlsrvgrp ]
          ctrl01

          [stack_inst:children]
          websrvgrp
          app01
          db01
          rmq01
          ctrl01

          [stack_inst:vars]
          ansible_user=ubuntu
          ansible_ssh_private_key_file=vpro_stack_keypair.pem
          #ansible_python_interpreter=/usr/bin/python3
